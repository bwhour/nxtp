/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Multicall, MulticallInterface } from "../Multicall";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x6951f120",
        type: "bytes32",
      },
    ],
    name: "c_0x6951f120",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b1a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063252dba421461003b57806387cd2a3f1461006c575b600080fd5b610055600480360381019061005091906106b0565b610088565b604051610063929190610833565b60405180910390f35b610086600480360381019061008191906106f1565b610507565b005b600060606100b87f5e962dd3731fcbc79a6727c0dfd863d0cb6613fb55f89a55b0b3734cc4bf0fc760001b610507565b6100e47f63e257e2dc63b19fbb7dae16ffbabf8d6c7dbe6200f13434eb4c1a4acf5aea3460001b610507565b6101107f3a15df97a3427aead51246800d765e795b29dac8c070d6ce1db8706780414cd360001b610507565b43915061013f7fc8a1a898d10d9b590d7b43bc77c612200a99f6cb748433e9543b479ba9b65fa560001b610507565b61016b7f56daf64e06d15dbc75c154ff90896f9ea135087a86f832d8ebce197e18f0e68060001b610507565b825167ffffffffffffffff8111156101ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101df57816020015b60608152602001906001900390816101ca5790505b50905061020e7f28678b42077c701bb63a733db8de7ed8c0e5adecb7d322f5f124d7fe263e9a4860001b610507565b61023a7f1fe95855def56a70d40a4dab8a1c557c09a069020a81fa5b6e5d59df0d35ded560001b610507565b60005b8351811015610501576102727f61326f56fef082f428c20c964a4aebf2e42443a2c7ac6dd6e2cdf92b3234ad8d60001b610507565b61029e7fa7d4a8780cdb07dda8211c6a4ab24e8b08d962675f87113878d079838cc0a01860001b610507565b6000808583815181106102da577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16868481518110610335577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015160405161034e919061081c565b6000604051808303816000865af19150503d806000811461038b576040519150601f19603f3d011682016040523d82523d6000602084013e610390565b606091505b50915091506103c17f920ae98e73d6cd684fb1c4817878cda99189d4fa49c78957c55257b2040734fc60001b610507565b6103ed7f5071dcfd1816f5f0fb75375aa23518fa8e8372b81bdd4cd39e2a0ecf6a70089260001b610507565b6104197f9abc24c354792eb757fddbcd83e17b233022b06eb302480ff195bf34c6ccff0e60001b610507565b8161042357600080fd5b61044f7f8db7cb819bf22506ba339fd99cdc1c0e78c01f53520b7dbd5928c123d0eef27d60001b610507565b61047b7f96b2abb81784c4abcb598f3f2861e7901423d2df79f842f3ccfaf8f09a58601460001b610507565b6104a77f9158d6f31dee041939c4af6ee54f63c224a5c609ee302aff4af0d9005b735f6a60001b610507565b808484815181106104e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250505080806104f9906109fe565b91505061023d565b50915091565b50565b600061051d61051884610888565b610863565b9050808382526020820190508285602086028201111561053c57600080fd5b60005b8581101561058657813567ffffffffffffffff81111561055e57600080fd5b80860161056b898261064c565b8552602085019450602084019350505060018101905061053f565b5050509392505050565b60006105a361059e846108b4565b610863565b9050828152602081018484840111156105bb57600080fd5b6105c684828561098b565b509392505050565b6000813590506105dd81610ab6565b92915050565b600082601f8301126105f457600080fd5b813561060484826020860161050a565b91505092915050565b60008135905061061c81610acd565b92915050565b600082601f83011261063357600080fd5b8135610643848260208601610590565b91505092915050565b60006040828403121561065e57600080fd5b6106686040610863565b90506000610678848285016105ce565b600083015250602082013567ffffffffffffffff81111561069857600080fd5b6106a484828501610622565b60208301525092915050565b6000602082840312156106c257600080fd5b600082013567ffffffffffffffff8111156106dc57600080fd5b6106e8848285016105e3565b91505092915050565b60006020828403121561070357600080fd5b60006107118482850161060d565b91505092915050565b600061072683836107a3565b905092915050565b6000610739826108f5565b6107438185610918565b935083602082028501610755856108e5565b8060005b858110156107915784840389528151610772858261071a565b945061077d8361090b565b925060208a01995050600181019050610759565b50829750879550505050505092915050565b60006107ae82610900565b6107b88185610929565b93506107c881856020860161099a565b6107d181610aa5565b840191505092915050565b60006107e782610900565b6107f1818561093a565b935061080181856020860161099a565b80840191505092915050565b61081681610981565b82525050565b600061082882846107dc565b915081905092915050565b6000604082019050610848600083018561080d565b818103602083015261085a818461072e565b90509392505050565b600061086d61087e565b905061087982826109cd565b919050565b6000604051905090565b600067ffffffffffffffff8211156108a3576108a2610a76565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156108cf576108ce610a76565b5b6108d882610aa5565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061095082610961565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156109b857808201518184015260208101905061099d565b838111156109c7576000848401525b50505050565b6109d682610aa5565b810181811067ffffffffffffffff821117156109f5576109f4610a76565b5b80604052505050565b6000610a0982610981565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a3c57610a3b610a47565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610abf81610945565b8114610aca57600080fd5b50565b610ad681610957565b8114610ae157600080fd5b5056fea2646970667358221220a58c83b395917d78e183796e66d4ad9a2f6ca0aa13ba71a28716f6030d2318bb64736f6c63430008040033";

export class Multicall__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
